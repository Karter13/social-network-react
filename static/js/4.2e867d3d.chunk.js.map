{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","redux/dialogs-selectors.ts","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","s","message","DialogItem","path","id","dialog","item","src","img","alt","to","name","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","mapStateToPropsRedirect","store","isAuth","auth","getdialogsPage","state","dialogsPage","DialogsContainer","compose","connect","addMessage","Component","RedirectComponent","this","React","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","formData","newMessageBody"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,wBAAwB,KAAO,wB,uFCMtOC,EAAsC,SAACC,GAChD,OACI,yBAAKC,UAAWC,IAAEC,SAAUH,EAAMG,U,QCA7BC,EAAwC,SAACJ,GAClD,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OACI,yBAAKL,UAAWC,IAAEK,QACd,yBAAKN,UAAWC,IAAEM,MACd,yBACIC,IAAKT,EAAMU,IACXC,IAAI,YAEZ,kBAAC,IAAD,CAASC,GAAIP,GAAb,IAAqBL,EAAMa,KAA3B,O,kCCsCNC,EAAeC,YAAiB,KAkBhCC,EAAsBC,YAA+B,CAACC,KAAM,wBAAtCD,EAhBoD,SAACjB,GAC7E,OACI,0BAAMmB,SAAUnB,EAAMoB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBD,KAAM,iBACNa,YAAa,wBAExB,6BACI,oD,+CC9DVC,EAA0B,SAACC,GAAD,MAAuB,CACnDC,OAAQD,EAAME,KAAKD,S,WCLVE,EAAiB,SAACC,GAC3B,OAAOA,EAAMC,aCaXC,EAAmBC,kBACrBC,aAPoB,SAACJ,GACrB,MAAO,CACHC,YAAaF,EAAeC,MAKP,CAACK,kBFPvB,SAA2BC,GAAsC,IAE9DC,EAF6D,uKAK3D,OAAIC,KAAKxC,MAAM6B,OACR,kBAACS,EAAcE,KAAKxC,OADG,kBAAC,IAAD,CAAUY,GAAI,eALe,GAEnC6B,IAAMH,WAUtC,OAFqCF,YAAQT,EAARS,CAAiCG,KEJjDJ,EHO0B,SAACnC,GAEhD,IAAIgC,EAAQhC,EAAMiC,YAEdS,EAAkBV,EAAMW,QACvBC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYC,IAAKD,EAAEvC,GAAIO,KAAMgC,EAAEhC,KAAMP,GAAIuC,EAAEvC,GAAII,IAAKmC,EAAEnC,SAChEqC,EAAmBf,EAAMgB,SACxBJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASH,IAAKG,EAAE3C,GAAIH,QAAS8C,EAAE9C,aAO7C,OACI,yBAAKF,UAAWC,IAAEyC,SACd,yBAAK1C,UAAWC,IAAEgD,cACbR,GAEL,yBAAKzC,UAAWC,IAAE8C,UACd,6BACKD,IAGT,kBAAC/B,EAAD,CAAqBG,SAdP,SAACgC,GACnBnD,EAAMqC,WAAYc,EAASC,uBGbpBlB","file":"static/js/4.2e867d3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1JmSI\",\"dialogsItems\":\"Dialogs_dialogsItems__3vqrX\",\"active\":\"Dialogs_active__ydoNW\",\"messages\":\"Dialogs_messages__1WW42\",\"message\":\"Dialogs_message__2xVE8\",\"dialog\":\"Dialogs_dialog__1Q8zH\",\"item\":\"Dialogs_item__2LrWD\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\nexport type MessagePropsType = {\r\n    id?: number\r\n    message: string\r\n}\r\nexport const Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport type DialogPropsType = {\r\n    id: string\r\n    name: string\r\n    img: string\r\n}\r\nexport const DialogItem: React.FC<DialogPropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <div className={s.item}>\r\n                <img\r\n                    src={props.img}\r\n                    alt=\"avatar\"/>\r\n            </div>\r\n            <NavLink to={path}> {props.name} </NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from './Message/Message';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {DialogsPageType} from '../../redux/dialogs-reducer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormControls/FormControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\nimport {UserType} from '../../redux/users-reducer';\r\n\r\ntype OwnFormPropsType = {\r\n    addNewMessageText: (text: string) => void\r\n}\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\ntype MapDispatchPropsType = {\r\n    addMessage: (value: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = OwnFormPropsType\r\n    & MapStatePropsType & MapDispatchPropsType\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs\r\n        .map(d => <DialogItem key={d.id} name={d.name} id={d.id} img={d.img}/>);\r\n    let messagesElements = state.messages\r\n        .map(m => <Message key={m.id} message={m.message}/>);\r\n\r\n\r\n    const addNewMessage = (formData: AddMessagesFormType) => {\r\n        props.addMessage( formData.newMessageBody );\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype AddMessagesFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessagesFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength100]}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'} />\r\n            </div>\r\n            <div>\r\n                <button>add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessagesFormType>({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n","import React from 'react';\r\nimport {Redirect} from 'react-router';\r\nimport {StateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nconst mapStateToPropsRedirect = (store: StateType) => ({\r\n    isAuth: store.auth.isAuth\r\n});\r\n\r\nexport function withAuthRedirect (Component: React.ComponentType<any>) {\r\n\r\n    class RedirectComponent extends React.Component<any> {\r\n\r\n        render()  {\r\n            if(!this.props.isAuth) return <Redirect to={'/login'}/>;\r\n            return <Component {...this.props}/>;\r\n        }\r\n    }\r\n\r\n    let ConnectedAUthRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAUthRedirectComponent;\r\n}\r\n","import {StateType} from './redux-store';\r\n\r\nexport const getdialogsPage = (state: StateType) => {\r\n    return state.dialogsPage\r\n}\r\n","import React from 'react';\r\nimport {addMessage} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {getdialogsPage} from '../../redux/dialogs-selectors';\r\n\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogsPage: getdialogsPage(state)\r\n    }\r\n};\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addMessage}),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\nexport default DialogsContainer;\r\n"],"sourceRoot":""}