{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/profile-selectors.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileInfo","isOwner","savePhoto","saveProfile","Preloader","descriptionBlock","photo","src","photos","large","userPhoto","target","files","initialValues","formData","then","goToEditMode","ProfileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","Post","item","alt","message","likesCount","MyPosts","React","memo","postsElement","posts","p","id","postsBlock","AddPostFormRedux","addPost","newPostText","maxLength10","maxLengthCreator","Field","component","name","placeholder","validate","required","profileSelector","state","profilePage","statusProfileSelector","authorizedUserIdProfileSelector","auth","userId","isAuthProfileSelector","isAuth","postsSelector","MyPostsContainer","connect","Profile","ProfileContainer","Number","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","withRouter"],"mappings":"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","file":"static/js/3.335493eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__3rqBV\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__26AkA\",\"photo\":\"ProfileInfo_photo__thspR\",\"contact\":\"ProfileInfo_contact__24KJ7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__2HFTp\",\"postsBlock\":\"MyPosts_postsBlock__6lu-v\",\"posts\":\"MyPosts_posts__1id2i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3Myt5\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                   <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || '--------'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true}\r\n                       onChange={onStatusChange}\r\n                       onBlur={deActivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {createField, Input, Textarea} from '../../common/FormControls/FormControls';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {ContactsType, ProfileType} from '../../../redux/profile-reducer';\r\nimport style from '../../Login/Login.module.css';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n\r\n            {\r\n                error && <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n\r\n            <div>\r\n                <b>FullName:</b>\r\n                {createField('FullName', 'fullName', [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>LookingForAJob:</b>\r\n                {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n\r\n            <div>\r\n                <b>About me:</b>\r\n                {createField('About me', 'aboutMe', [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {(Object.keys(profile.contacts) as Array<keyof ContactsType>).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\nexport default ProfileDataFormReduxForm\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ContactsType, ProfileType} from '../../../redux/profile-reducer';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/noavatar.png'\r\nimport ProfileDataFormReduxForm from './ProfileDataForm';\r\n\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    saveProfile: (formData: ProfileType) => Promise<void>\r\n}\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile, ...props}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.photo}>\r\n                    <img src={profile.photos.large || userPhoto}/>\r\n                </div>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={profile} isOwner={isOwner}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        profile && <div>\r\n\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n\r\n            <div>\r\n                <b>FullName:</b>{profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>LookingForAJob:</b>{profile.lookingForAJob ? 'YES' : 'No'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills:</b>{profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>About me:</b>{profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {(Object.keys(profile.contacts) as Array<keyof ContactsType>).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: any\r\n}\r\nconst Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"http://avatars.mds.yandex.net/get-pdb/1245924/bc43f857-5d36-4e10-a9e1-4f838cbb5753/s1200?webp=false\"\r\n                alt=\"avatar\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>\r\n                    likes\r\n                </span>\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post';\r\nimport {PostType,} from '../../../redux/profile-reducer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormControls/FormControls';\r\n\r\ntype PathParamType = {}\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (value: string) => void\r\n}\r\nexport type MyPostsPropsType = PathParamType & MapStatePropsType & MapDispatchPropsType\r\n\r\nexport const MyPosts: React.FC<MyPostsPropsType> = React.memo((props) => {\r\n\r\n    let postsElement = props.posts\r\n        .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    const onAddPost = (formData: AddPostsFormType) => {\r\n        props.addPost(formData.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddPostFormRedux onSubmit={onAddPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\ntype AddPostsFormType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<AddPostsFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newPostText'}\r\n                       placeholder={'Enter your post'}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddPostFormRedux = reduxForm<AddPostsFormType>({form: 'profileAddNewPostForm'})(AddNewPostForm);\r\n","import {StateType} from './redux-store';\r\n\r\n//selectors for ProfileContainer\r\nexport const profileSelector = (state: StateType) => {\r\n    return state.profilePage.profile\r\n};\r\nexport const statusProfileSelector = (state: StateType) => {\r\n    return state.profilePage.status\r\n};\r\nexport const authorizedUserIdProfileSelector = (state: StateType) => {\r\n    return state.auth.userId\r\n};\r\nexport const isAuthProfileSelector = (state: StateType) => {\r\n    return state.auth.isAuth\r\n};\r\n\r\n//selectors for MyPostContainer\r\nexport const postsSelector = (state: StateType) => {\r\n    return state.profilePage.posts\r\n};\r\n","import React from 'react';\r\nimport {addPost} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {StateType} from '../../../redux/redux-store';\r\nimport {postsSelector} from '../../../redux/profile-selectors';\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n return {\r\n     posts: postsSelector(state),\r\n }\r\n};\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts);\r\n","import React from 'react';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\ntype ProfilePropsType = {\r\n    status: string\r\n    profile: ProfileType | null\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    saveProfile: (formData: ProfileType) => Promise<void>\r\n}\r\nexport const Profile: React.FC<ProfilePropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         saveProfile={props.saveProfile}\r\n                         savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfileType,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus\r\n} from '../../redux/profile-reducer';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {\r\n    authorizedUserIdProfileSelector,\r\n    isAuthProfileSelector,\r\n    profileSelector,\r\n    statusProfileSelector\r\n} from '../../redux/profile-selectors';\r\n\r\ntype OwnPropsType = {}\r\n//type for withRouter\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null,\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: any\r\n    saveProfile: (formData: ProfileType) => any\r\n}\r\ntype ProfileAPIContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamType> & ProfileAPIContainerPropsType & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId || 0;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => {\r\n    return ({\r\n        profile: profileSelector(state),\r\n        status: statusProfileSelector(state),\r\n        authorizedUserId: authorizedUserIdProfileSelector(state),\r\n        isAuth: isAuthProfileSelector(state)\r\n    });\r\n};\r\n\r\nexport default compose<React.ComponentClass>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, StateType>\r\n    (mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n\r\n"],"sourceRoot":""}