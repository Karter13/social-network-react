{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/profile-selectors.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileInfo","profile","className","s","descriptionBlock","photo","src","photos","small","Preloader","Post","item","alt","message","likesCount","MyPosts","React","memo","postsElement","posts","map","p","key","id","postsBlock","AddPostFormRedux","onSubmit","formData","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","profileSelector","state","profilePage","statusProfileSelector","authorizedUserIdProfileSelector","auth","userId","isAuthProfileSelector","isAuth","postsSelector","MyPostsContainer","connect","Profile","ProfileContainer","Number","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","withRouter"],"mappings":"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","file":"static/js/3.8984dd65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__3rqBV\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__26AkA\",\"photo\":\"ProfileInfo_photo__thspR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__2HFTp\",\"postsBlock\":\"MyPosts_postsBlock__6lu-v\",\"posts\":\"MyPosts_posts__1id2i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3Myt5\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '--------'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true}\r\n                       onChange={onStatusChange}\r\n                       onBlur={deActivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n};\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {ProfileStatus} from './ProfileStatus';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profile}>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.photo}>\r\n                    <img src={profile.photos.small}/>\r\n                </div>\r\n                <ProfileStatusWithHooks status={status}\r\n                               updateStatus={updateStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"http://avatars.mds.yandex.net/get-pdb/1245924/bc43f857-5d36-4e10-a9e1-4f838cbb5753/s1200?webp=false\"\r\n                alt=\"avatar\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>\r\n                    likes\r\n                </span>\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post';\r\nimport {PostType, ProfileType,} from '../../../redux/profile-reducer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormControls/FormControls';\r\n\r\ntype PathParamType = {}\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (value: string) => void\r\n}\r\nexport type MyPostsPropsType = PathParamType & MapStatePropsType & MapDispatchPropsType\r\n\r\nexport const MyPosts: React.FC<MyPostsPropsType> = React.memo((props) => {\r\n\r\n    let postsElement = props.posts\r\n        .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    const onAddPost = (formData: AddPostsFormType) => {\r\n        props.addPost(formData.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddPostFormRedux onSubmit={onAddPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\ntype AddPostsFormType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<AddPostsFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newPostText'}\r\n                       placeholder={'Enter your post'}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddPostFormRedux = reduxForm<AddPostsFormType>({form: 'profileAddNewPostForm'})(AddNewPostForm);\r\n","import {StateType} from './redux-store';\r\n\r\n//selectors for ProfileContainer\r\nexport const profileSelector = (state: StateType) => {\r\n    return state.profilePage.profile\r\n};\r\nexport const statusProfileSelector = (state: StateType) => {\r\n    return state.profilePage.status\r\n};\r\nexport const authorizedUserIdProfileSelector = (state: StateType) => {\r\n    return state.auth.userId\r\n};\r\nexport const isAuthProfileSelector = (state: StateType) => {\r\n    return state.auth.isAuth\r\n};\r\n\r\n//selectors for MyPostContainer\r\nexport const postsSelector = (state: StateType) => {\r\n    return state.profilePage.posts\r\n};\r\n","import React from 'react';\r\nimport {addPost} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {StateType} from '../../../redux/redux-store';\r\nimport {postsSelector} from '../../../redux/profile-selectors';\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n return {\r\n     posts: postsSelector(state),\r\n }\r\n};\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts);\r\n","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\ntype ProfilePropsType = {\r\n    status: string\r\n    profile: ProfileType | null\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const Profile: React.FC<ProfilePropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from '../../redux/profile-reducer';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {\r\n    authorizedUserIdProfileSelector,\r\n    isAuthProfileSelector,\r\n    profileSelector,\r\n    statusProfileSelector\r\n} from '../../redux/profile-selectors';\r\n\r\ntype OwnPropsType = {}\r\n//type for withRouter\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null,\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype ProfileAPIContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamType> & ProfileAPIContainerPropsType & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    componentDidMount(): void {\r\n        let userId = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId || 0;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        // console.log('RENDER PROFILE');\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => {\r\n    // console.log('mapStateToProps PROFILE');\r\n    return ({\r\n        profile: profileSelector(state),\r\n        status: statusProfileSelector(state),\r\n        authorizedUserId: authorizedUserIdProfileSelector(state),\r\n        isAuth: isAuthProfileSelector(state)\r\n    });\r\n};\r\n\r\nexport default compose<React.ComponentClass>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, StateType>\r\n    (mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n\r\n"],"sourceRoot":""}